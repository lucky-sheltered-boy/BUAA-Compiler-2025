INTTK int
IDENFR ar
LBRACK [
INTCON 101
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR select_sort
LPARENT (
INTTK int
IDENFR ar
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR d
COMMA ,
IDENFR temp
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
MINU -
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR d
ASSIGN =
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR j
LSS <
IDENFR n
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ar
LBRACK [
IDENFR j
RBRACK ]
LSS <
IDENFR ar
LBRACK [
IDENFR d
RBRACK ]
RPARENT )
IDENFR d
ASSIGN =
IDENFR j
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR i
RPARENT )
LBRACE {
IDENFR temp
ASSIGN =
IDENFR ar
LBRACK [
IDENFR d
RBRACK ]
SEMICN ;
IDENFR ar
LBRACK [
IDENFR d
RBRACK ]
ASSIGN =
IDENFR ar
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR ar
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR temp
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR ar
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR adjust
LPARENT (
INTTK int
IDENFR k
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR i
COMMA ,
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR sum
RPARENT )
LBRACE {
INTTK int
IDENFR j
COMMA ,
IDENFR temp
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
INTCON 2
MULT *
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LSS <
IDENFR n
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
LSS <
IDENFR n
MINU -
INTCON 1
AND &&
IDENFR k
LBRACK [
IDENFR j
RBRACK ]
LSS <
IDENFR k
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
RPARENT )
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR temp
GEQ >=
IDENFR k
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
BREAKTK break
SEMICN ;
IDENFR k
LBRACK [
LPARENT (
IDENFR j
MINU -
INTCON 1
DIV /
INTCON 2
RBRACK ]
ASSIGN =
IDENFR k
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
INTCON 2
MULT *
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR k
LBRACK [
LPARENT (
IDENFR j
MINU -
INTCON 1
RPARENT )
DIV /
INTCON 2
ASSIGN =
IDENFR temp
SEMICN ;
RBRACE }
VOIDTK void
IDENFR heap_sort
LPARENT (
INTTK int
IDENFR k
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR temp
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR n
DIV /
INTCON 2
MINU -
INTCON 1
SEMICN ;
IDENFR i
GEQ >=
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
IDENFR sum
ASSIGN =
IDENFR adjust
LPARENT (
IDENFR k
COMMA ,
IDENFR i
COMMA ,
IDENFR n
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR n
MINU -
INTCON 1
SEMICN ;
IDENFR i
GEQ >=
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR temp
ASSIGN =
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR k
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR k
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR temp
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR adjust
LPARENT (
IDENFR k
COMMA ,
INTCON 0
COMMA ,
IDENFR i
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n%d"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR merge
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR tmp
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR left
COMMA ,
INTTK int
IDENFR leftend
COMMA ,
INTTK int
IDENFR rightend
COMMA ,
INTTK int
IDENFR sum
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR q
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR left
COMMA ,
IDENFR j
ASSIGN =
IDENFR leftend
PLUS +
INTCON 1
COMMA ,
IDENFR q
ASSIGN =
IDENFR left
SEMICN ;
IDENFR i
LEQ <=
IDENFR leftend
AND &&
IDENFR j
LEQ <=
IDENFR rightend
SEMICN ;
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
LEQ <=
IDENFR x
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR q
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR q
ASSIGN =
IDENFR q
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR tmp
LBRACK [
IDENFR q
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR q
ASSIGN =
IDENFR q
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LEQ <=
IDENFR leftend
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR q
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR q
ASSIGN =
IDENFR q
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LEQ <=
IDENFR rightend
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR q
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR q
ASSIGN =
IDENFR q
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR left
SEMICN ;
IDENFR i
LEQ <=
IDENFR rightend
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR tmp
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR mpass
LPARENT (
INTTK int
IDENFR k
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR tmp
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR left
COMMA ,
INTTK int
IDENFR right
RPARENT )
LBRACE {
INTTK int
IDENFR center
SEMICN ;
STATICTK static
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR left
LSS <
IDENFR right
RPARENT )
LBRACE {
IDENFR center
ASSIGN =
LPARENT (
IDENFR left
PLUS +
IDENFR right
RPARENT )
DIV /
INTCON 2
SEMICN ;
IDENFR mpass
LPARENT (
IDENFR k
COMMA ,
IDENFR tmp
COMMA ,
IDENFR left
COMMA ,
IDENFR center
RPARENT )
SEMICN ;
IDENFR mpass
LPARENT (
IDENFR k
COMMA ,
IDENFR tmp
COMMA ,
IDENFR center
PLUS +
INTCON 1
COMMA ,
IDENFR right
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR merge
LPARENT (
IDENFR k
COMMA ,
IDENFR tmp
COMMA ,
IDENFR left
COMMA ,
IDENFR center
COMMA ,
IDENFR right
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
VOIDTK void
IDENFR merge_sort
LPARENT (
INTTK int
IDENFR k
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR tmp
LBRACK [
INTCON 10000
RBRACK ]
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR mpass
LPARENT (
IDENFR k
COMMA ,
IDENFR tmp
COMMA ,
INTCON 0
COMMA ,
IDENFR n
MINU -
INTCON 1
RPARENT )
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "\n%d"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
COMMA ,
IDENFR i
COMMA ,
IDENFR op
SEMICN ;
IDENFR n
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR op
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
IDENFR br
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR op
EQL ==
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Calling Selection Sort\n"
RPARENT )
SEMICN ;
IDENFR select_sort
LPARENT (
IDENFR ar
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR op
EQL ==
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Calling Bubble Sort\n"
RPARENT )
SEMICN ;
IDENFR bubble_sort
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR op
EQL ==
INTCON 3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Calling Heap Sort\n"
RPARENT )
SEMICN ;
IDENFR heap_sort
LPARENT (
IDENFR ar
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR op
EQL ==
INTCON 4
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Calling Merge Sort\n"
RPARENT )
SEMICN ;
IDENFR merge_sort
LPARENT (
IDENFR ar
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Error: op must be between 1 and 5"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
